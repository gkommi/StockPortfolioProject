/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gowtam.stockportfolioproject;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 1687968
 */
public class MarketClosingPricesWindow extends javax.swing.JFrame {

    /**
     * Creates new form marketClosingPricesWindow
     */
    public MarketClosingPricesWindow() {
        initComponents();
        this.setDefaultCloseOperation ( JFrame.DISPOSE_ON_CLOSE );
    }

    private Portfolio _portfolio;
    private DefaultTableModel _model;
    private ArrayList<StockPrice> _pricesList;      // holds all prices read from file
            
    public void initialize(Portfolio portfolio)
    {
        _portfolio = portfolio;
        
        Calendar cal = Calendar.getInstance();
        Date today = cal.getTime();
        todaysDateField.setDate(today);
        
        _pricesList = readPrices();
        
        _model = (DefaultTableModel) mcpTable.getModel();
        _model.setRowCount(0);      // clear table
        
        loadPricesToTable(_model, _pricesList);
        
        cal.add(Calendar.DAY_OF_MONTH, -10);
        Date latestDate = cal.getTime();
        latestPricesDateField.setDate(latestDate);
    }
    
    private void loadPricesToTable(DefaultTableModel model, List<StockPrice> priceByTicker)
    {
        for (StockPrice p : priceByTicker)
        {
            System.out.printf("%s %s %.4f\n", p.Ticker(), p.CloseDate(), p.ClosePrice());

            model.addRow(new Object[] {p.Ticker(), p.CloseDate(), p.ClosePrice()});
        }
        System.out.println();
    }

    private ArrayList<StockPrice> readPrices()
    {
        ArrayList<StockPrice> pricesList = new ArrayList<>();
        String filename = getStockPricesFile();
        File f = new File(filename);
        if (!f.exists())        // file does not exists
            return pricesList;
        
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));
            String line = reader.readLine(); //skipping first line, header
            System.out.println(line);
            while ((line = reader.readLine()) != null) {
              System.out.println(line);
                String[] x = line.split(",");
                StockPrice p = new StockPrice(x[0], LocalDate.parse(x[1]), Double.parseDouble(x[2]));
                pricesList.add(p);
            }
            reader.close(); 
        }
        catch (IOException ex)
        {
           System.out.println("MY ERROR: file does not exist");
           ex.printStackTrace();
        }
        return pricesList;
        
     }
    
    //save data in portfolio object into portfolioDetails.txt file
    private void savePricesToFile(ArrayList<StockPrice> pricesList) {
        String filename = getStockPricesFile(); 
        try {
            File f = new File(filename);
            boolean needHeader = !f.exists();
            
            BufferedWriter writer = new BufferedWriter(new FileWriter(filename, true));
            if (needHeader)
            {
                writer.write("Ticker,Date,Price");
                writer.newLine();
            }
            for (StockPrice price : pricesList)
            {
                StringBuilder buf = new StringBuilder();
                buf.append(price.Ticker())
                    .append(",").append(price.CloseDate())
                    .append(",").append(price.ClosePrice());
                writer.write(buf.toString());
                writer.newLine();
            }
            
            writer.close();
            JOptionPane.showMessageDialog(this, "Downloaded and saved!", "Save", JOptionPane.INFORMATION_MESSAGE);
        }     
        catch (IOException ex)
        {
          System.out.println("MY ERROR: file does not exist");
          ex.printStackTrace();
          JOptionPane.showMessageDialog(this, "Error saving to File", "Save", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String getStockPricesFile() {
        return _portfolio.getFolder() + File.separator + "StockPrices.txt";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        todaysDateMCP = new javax.swing.JLabel();
        latestPricesLabel = new javax.swing.JLabel();
        downloadPricesButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mcpTable = new javax.swing.JTable();
        todaysDateField = new org.jdesktop.swingx.JXDatePicker();
        latestPricesDateField = new org.jdesktop.swingx.JXDatePicker();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        todaysDateMCP.setText("Todays Date");

        latestPricesLabel.setText("Load Prices From");

        downloadPricesButton.setText("Download Prices");
        downloadPricesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadPricesButtonActionPerformed(evt);
            }
        });

        mcpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "Security Ticker", "Closing Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(mcpTable);

        todaysDateField.setEditable(false);

        latestPricesDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                latestPricesDateFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(latestPricesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(todaysDateMCP))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(latestPricesDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(todaysDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(downloadPricesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(todaysDateMCP)
                    .addComponent(todaysDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(latestPricesLabel)
                    .addComponent(latestPricesDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downloadPricesButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void downloadPricesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadPricesButtonActionPerformed
        // TODO add your handling code here:
        Date date = latestPricesDateField.getDate();
        LocalDate fromDate = Conversions.convertToLocalDate(date); //LocalDate.of(date.getYear(), date.getMonth(), date.getDay());
        StockPriceDownloader downloader = new StockPriceDownloader();
        ArrayList<StockPrice> pricesList = downloader.getPrices("MSFT", fromDate);
        
        //Clear table
        DefaultTableModel model = (DefaultTableModel) mcpTable.getModel();
        model.setRowCount(0);
        
        loadPricesToTable(model, pricesList);
        
        savePricesToFile(pricesList);
    }//GEN-LAST:event_downloadPricesButtonActionPerformed
    private void latestPricesDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_latestPricesDateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_latestPricesDateFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarketClosingPricesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarketClosingPricesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarketClosingPricesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarketClosingPricesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarketClosingPricesWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadPricesButton;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker latestPricesDateField;
    private javax.swing.JLabel latestPricesLabel;
    private javax.swing.JTable mcpTable;
    private org.jdesktop.swingx.JXDatePicker todaysDateField;
    private javax.swing.JLabel todaysDateMCP;
    // End of variables declaration//GEN-END:variables
}
